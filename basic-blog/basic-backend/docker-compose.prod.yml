services:
    app:
        container_name: backend-api
        image: kpi-backend:${KPI_BACKEND_VERSION:-latest}
        build:
            context: .
        user: node
        restart: always
        ports:
            - ${APP_PORT}:${APP_PORT}
        env_file:
            - .env
        depends_on:
            - database
        volumes:
            - ./data:/app/data
            - ./logs:/app/logs
            - ./config:/app/config
    dashboard:
        container_name: frontend-dashboard
        image: nginx:1.28.0-alpine
        restart: always
        environment:
            - VIRTUAL_PORT=80
            - VIRTUAL_HOST=${VIRTUAL_HOST_DASHBOARD}
            - LETSENCRYPT_HOST=${VIRTUAL_HOST_DASHBOARD}
            - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
        ports:
            - "8080:80"
        volumes:
            - ./dashboard:/usr/share/nginx/html
            - ./docker/dashboard/nginx.conf:/etc/nginx/nginx.conf
        depends_on:
            - app
    database:
        container_name: database
        image: mysql:8.4.5
        restart: always
        environment:
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
            - MYSQL_DATABASE=${DATABASE_NAME}
            - TZ=${APP_TIMEZONE}
        ports:
            - "3306:3306"
        command: ['mysqld', '--character-set-server=utf8mb4', '--collation-server=utf8mb4_0900_ai_ci']
        volumes:
            - mysql_data:/var/lib/mysql
        cap_add:
            - SYS_NICE # CAP_SYS_NICE
    redis:
        container_name: redis
        image: redis:7.4.3-alpine
        restart: always
        environment:
            ALLOW_EMPTY_PASSWORD: "no"
            REDIS_PASSWORD: ${REDIS_PASSWORD}
        ports:
            - "6379:6379"
        volumes:
            # - ./docker/redis/redis.conf:/opt/bitnami/redis/mounted-etc/redis.conf
            - redis_data:/bitnami/redis/data
    nginx-proxy:
        container_name: nginx-proxy
        image: jwilder/nginx-proxy:1.7
        restart: always
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - certs:/etc/nginx/certs
            - html:/usr/share/nginx/html
            - /var/run/docker.sock:/tmp/docker.sock:ro
            - ./docker/nginx-proxy/logs/:/var/log/nginx/
            - ./docker/nginx-proxy/conf.d/config.conf:/etc/nginx/conf.d/config.conf
            - ./docker/nginx-proxy/vhost.d/:/etc/nginx/vhost.d/
    nginx-proxy-acme:
        container_name: nginx-proxy-acme
        image: nginxproxy/acme-companion
        restart: always
        volumes_from:
            - nginx-proxy
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - acme:/etc/acme.sh
    phpmyadmin:
        container_name: phpmyadmin
        image: phpmyadmin/phpmyadmin:latest
        restart: always
        ports:
            - "8000:80"
        environment:
            - PMA_ARBITRARY=0
            - PMA_HOST=database
            - MYSQL_DATABASE=${DATABASE_NAME}
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        depends_on:
            - database
        logging:
            driver: none
    es01:
      image: docker.elastic.co/elasticsearch/elasticsearch-wolfi:8.18.1
      container_name: es01
      environment:
        - ES_JAVA_OPTS=-Xms4g -Xmx4g
        - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      ulimits:
        # Read here why: https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#_disable_swapping
        memlock:
          soft: -1
          hard: -1
      deploy:
        resources:
          limits:
            memory: 4G
      volumes:
        - es01_data:/usr/share/elasticsearch/data
        - ./docker/elastic/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      ports:
        - ${ELASTIC_PORT}:9200
volumes:
    mysql_data:
    redis_data:
    certs:
    html:
    acme:

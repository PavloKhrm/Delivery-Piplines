- hosts: all
  vars:
    KUBECONFIG_LOCAL: kubeconfig_{{ inventory_hostname }}.yaml
  tasks:
    # -------------------------------
    # Traefik Ingress Controller
    # -------------------------------
    - name: Add Traefik Helm repo
      local_action: shell helm repo add traefik https://traefik.github.io/charts

    - name: Update Helm repos
      local_action: shell helm repo update

    - name: Install Traefik via Helm
      local_action: shell |
        helm upgrade --install traefik traefik/traefik \
        --kubeconfig {{ KUBECONFIG_LOCAL }} \
        -n kube-system --create-namespace

    # -------------------------------
    # cert-manager
    # -------------------------------
    - name: Install cert-manager CRDs
      local_action: shell |
        kubectl --kubeconfig {{ KUBECONFIG_LOCAL }} \
        apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.crds.yaml

    - name: Add Jetstack Helm repo
      local_action: shell helm repo add jetstack https://charts.jetstack.io

    - name: Update Helm repos
      local_action: shell helm repo update

    - name: Install cert-manager via Helm
      local_action: shell |
        helm upgrade --install cert-manager jetstack/cert-manager \
        --kubeconfig {{ KUBECONFIG_LOCAL }} \
        -n cert-manager --create-namespace \
        --version v1.14.4 \
        --set installCRDs=false

    # -------------------------------
    # ClusterIssuer (Let's Encrypt)
    # -------------------------------
    - name: Create ClusterIssuer (Letâ€™s Encrypt)
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG_LOCAL }}"
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt
          spec:
            acme:
              email: "{{ email_lets_encrypt }}"
              server: https://acme-v02.api.letsencrypt.org/directory
              privateKeySecretRef:
                name: letsencrypt-account-key
              solvers:
                - http01:
                    ingress:
                      class: traefik

    # -------------------------------
    # Client Namespace
    # -------------------------------
    - name: Ensure client namespace exists
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG_LOCAL }}"
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ client_namespace }}"

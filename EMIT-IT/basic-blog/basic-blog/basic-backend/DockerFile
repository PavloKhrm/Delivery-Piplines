# ───────────────────────────────────────────────
# STAGE 1 — Builder
# ───────────────────────────────────────────────
FROM node:22-bullseye-slim AS builder

WORKDIR /app

# Copy dependency manifests
COPY package*.json ./

# Clean, reproducible install
RUN npm ci --legacy-peer-deps || npm install --legacy-peer-deps

# Copy application source
COPY . .

# Build arguments (can be overridden in Bitbucket)
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

# Compile NestJS → dist/
RUN npm run build


# ───────────────────────────────────────────────
# STAGE 2 — Runtime
# ───────────────────────────────────────────────
FROM node:22-bullseye-slim AS runtime

WORKDIR /app

# Copy dependency manifests for prod install
COPY package*.json ./

# Install only production dependencies
RUN npm ci --omit=dev --legacy-peer-deps || npm install --omit=dev --legacy-peer-deps

# Copy compiled build output
COPY --from=builder /app/dist ./dist

# Environment
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}
ENV PORT=3000

# Optional per-client variable (set in pipeline)
ARG CLIENT_NAME=default
ENV CLIENT_NAME=${CLIENT_NAME}

# Health check (optional)
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s \
  CMD node -e "fetch('http://localhost:' + process.env.PORT + '/health').then(r=>{if(!r.ok)process.exit(1)}).catch(()=>process.exit(1))"

EXPOSE 3000

# Default command
CMD ["npm", "run", "start:prod"]

apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-redis
spec:
  ports:
    - { name: redis, port: 6379, targetPort: 6379 }
  selector:
    app: {{ .Release.Name }}-redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-redis
spec:
  replicas: {{ if .Values.suspended }}0{{ else }}1{{ end }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-redis
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-redis
    spec:
      containers:
        - name: redis
          image: "{{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}"
          ports: [ { containerPort: 6379 } ]
          env:
            - { name: ALLOW_EMPTY_PASSWORD, value: "no" }
            - name: REDIS_PASSWORD
              valueFrom: { secretKeyRef: { name: {{ .Release.Name }}-secrets, key: REDIS_PASSWORD } }
          command: [ "redis-server", "--requirepass", "$(REDIS_PASSWORD)" ]
          resources:
{{- toYaml .Values.resources.redis | nindent 12 }}
          volumeMounts:
            - { name: data, mountPath: /data }
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-redis-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-redis-pvc
spec:
  accessModes: [ "ReadWriteOnce" ]
  {{- if .Values.storageClassName }}
  storageClassName: {{ .Values.storageClassName | quote }}
  {{- end }}
  resources:
    requests: { storage: {{ .Values.persistence.redis.size }} }
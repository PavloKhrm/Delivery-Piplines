{{- if .Values.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "blog-template.fullname" . }}-ingress
  namespace: {{ .Values.client.namespace }}
  labels:
    {{- include "blog-template.labels" . | nindent 4 }}
  annotations:
    {{- with .Values.ingress.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
    # Traefik specific annotations
    traefik.ingress.kubernetes.io/router.entrypoints: web{{- if .Values.ingress.tls.enabled }},websecure{{- end }}
    traefik.ingress.kubernetes.io/router.rule: Host(`{{ .Values.client.domain }}`)
    {{- if .Values.ingress.tls.enabled }}
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.tls.certresolver: letsencrypt
    {{- end }}
    # Load balancing
    traefik.ingress.kubernetes.io/service.loadbalancer.method: roundrobin
    traefik.ingress.kubernetes.io/service.loadbalancer.healthcheck.path: /health
    # Rate limiting
    traefik.ingress.kubernetes.io/router.middlewares: {{ .Values.client.namespace }}-rate-limit@kubernetescrd,{{ .Values.client.namespace }}-auth@kubernetescrd
spec:
  {{- if .Values.ingress.className }}
  ingressClassName: {{ .Values.ingress.className }}
  {{- end }}
  {{- if .Values.ingress.tls.enabled }}
  tls:
  - hosts:
    - {{ .Values.client.domain }}
    {{- if .Values.ingress.tls.secretName }}
    secretName: {{ .Values.ingress.tls.secretName }}
    {{- else }}
    secretName: {{ include "blog-template.fullname" . }}-tls
    {{- end }}
  {{- end }}
  rules:
  - host: {{ .Values.client.domain }}
    http:
      paths:
      # Frontend routes
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{ include "blog-template.frontend.serviceName" . }}
            port:
              number: {{ .Values.ports.frontend.internal }}
      # Backend API routes
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: {{ include "blog-template.backend.serviceName" . }}
            port:
              number: {{ .Values.ports.backend.internal }}
      # Health check endpoint
      - path: /health
        pathType: Prefix
        backend:
          service:
            name: {{ include "blog-template.backend.serviceName" . }}
            port:
              number: {{ .Values.ports.backend.internal }}
---
# Traefik Middleware for rate limiting
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: rate-limit
  namespace: {{ .Values.client.namespace }}
  labels:
    {{- include "blog-template.labels" . | nindent 4 }}
spec:
  rateLimit:
    burst: 100
    average: 50
    period: 1m
    sourceCriterion:
      ipStrategy:
        depth: 1
---
# Traefik Middleware for authentication (placeholder)
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: auth
  namespace: {{ .Values.client.namespace }}
  labels:
    {{- include "blog-template.labels" . | nindent 4 }}
spec:
  headers:
    customRequestHeaders:
      X-Client-Name: {{ .Values.client.name | quote }}
      X-Client-Namespace: {{ .Values.client.namespace | quote }}
---
# Traefik Middleware for CORS
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: cors
  namespace: {{ .Values.client.namespace }}
  labels:
    {{- include "blog-template.labels" . | nindent 4 }}
spec:
  headers:
    accessControlAllowMethods:
      - GET
      - POST
      - PUT
      - DELETE
      - OPTIONS
    accessControlAllowHeaders:
      - "*"
    accessControlAllowOriginList:
      - "https://{{ .Values.client.domain }}"
      - "http://{{ .Values.client.domain }}"
    accessControlMaxAge: 100
    addVaryHeader: true
{{- end }}

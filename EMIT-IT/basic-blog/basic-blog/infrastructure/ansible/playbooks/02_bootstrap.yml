---
# ───────────────────────────────────────────────
# 02_bootstrap.yml – Install Core Kubernetes Add-ons
# ───────────────────────────────────────────────

- name: Bootstrap core services (Traefik, cert-manager, CSI)
  hosts: k3s_master
  become: yes
  vars:
    KUBECONFIG_LOCAL: kubeconfig_cluster.yaml
    mode: "hetzner"             # override via --extra-vars "mode=local"
    client_namespace: "{{ lookup('env', 'CLIENT_NAME') | default('default', true) }}"
    email_lets_encrypt: "{{ lookup('env', 'LETSENCRYPT_EMAIL') | default('admin@emit-it.com', true) }}"

  tasks:
    # -------------------------------
    # Ensure Helm is installed
    # -------------------------------
    - name: Ensure Helm is installed
      shell: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      args:
        executable: /bin/bash
      retries: 3
      delay: 10
      register: helm_install
      until: helm_install.rc == 0
      delegate_to: "{{ inventory_hostname }}"

    # -------------------------------
    # Helm repositories
    # -------------------------------
    - name: Add Helm repositories
      shell: |
        helm repo add traefik https://traefik.github.io/charts || true
        helm repo add jetstack https://charts.jetstack.io || true
        {% if mode == 'hetzner' %}
        helm repo add hcloud https://charts.hetzner.cloud || true
        {% endif %}
        helm repo update
      args:
        executable: /bin/bash
      delegate_to: "{{ inventory_hostname }}"

    # -------------------------------
    # Traefik Ingress Controller
    # -------------------------------
    - name: Install Traefik via Helm
      shell: |
        helm upgrade --install traefik traefik/traefik \
          --namespace kube-system --create-namespace \
          --set ingressRoute.dashboard.enabled=true \
          --set ports.websecure.tls.enabled=true \
          --set service.type=NodePort \
          --set ingressClass.enabled=true \
          --set ingressClass.isDefaultClass=true \
          --wait --timeout 5m \
          --kubeconfig /etc/rancher/k3s/k3s.yaml
      retries: 3
      delay: 10
      register: traefik_result
      until: traefik_result.rc == 0
      delegate_to: "{{ inventory_hostname }}"

    # -------------------------------
    # cert-manager
    # -------------------------------
    - name: Install cert-manager CRDs
      shell: |
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.crds.yaml
      register: crd_result
      retries: 3
      delay: 10
      until: crd_result.rc == 0
      delegate_to: "{{ inventory_hostname }}"

    - name: Install cert-manager via Helm
      shell: |
        helm upgrade --install cert-manager jetstack/cert-manager \
          -n cert-manager --create-namespace \
          --version v1.14.4 \
          --set installCRDs=false \
          --wait --timeout 5m
      retries: 3
      delay: 10
      register: cert_result
      until: cert_result.rc == 0
      delegate_to: "{{ inventory_hostname }}"

    # -------------------------------
    # ClusterIssuers
    # -------------------------------
    - name: Create Self-Signed ClusterIssuer (for internal testing)
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG_LOCAL }}"
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: selfsigned-issuer
          spec:
            selfSigned: {}
      delegate_to: localhost
      when: mode != "hetzner"

    - name: Create Let’s Encrypt ClusterIssuer (production)
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG_LOCAL }}"
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt-prod
          spec:
            acme:
              email: "{{ email_lets_encrypt }}"
              server: https://acme-v02.api.letsencrypt.org/directory
              privateKeySecretRef:
                name: letsencrypt-prod
              solvers:
                - http01:
                    ingress:
                      class: traefik
      when: mode == "hetzner"

    # -------------------------------
    # Hetzner CSI (persistent storage)
    # -------------------------------
    - name: Install Hetzner CSI (only for Hetzner)
      shell: |
        helm upgrade --install hcloud-csi hcloud/hcloud-csi \
          -n kube-system --create-namespace \
          --set secret.token={{ lookup('env', 'HCLOUD_TOKEN') }} \
          --wait --timeout 5m
      when: mode == "hetzner"
      retries: 3
      delay: 10
      register: csi_result
      until: csi_result.rc == 0
      delegate_to: "{{ inventory_hostname }}"

    # -------------------------------
    # Client Namespace
    # -------------------------------
    - name: Ensure client namespace exists
      kubernetes.core.k8s:
        kubeconfig: "{{ KUBECONFIG_LOCAL }}"
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ client_namespace }}"
      delegate_to: "{{ inventory_hostname }}"

    # -------------------------------
    # Security Cleanup: Remove sudo privileges from deploy
    # -------------------------------
    - name: Remove temporary sudo permissions from deploy
      become: true
      lineinfile:
        path: /etc/sudoers
        state: absent
        regexp: '^deploy ALL='
        validate: 'visudo -cf %s'
      delegate_to: "{{ inventory_hostname }}"
